import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import '../../../../../models/missionary.dart';
import '../../../core/services/firestore_service.dart';

/// Screen for adding new missionary information
/// Demonstrates creating new documents in Firestore
class MissionaryAddScreen extends StatefulWidget {
  const MissionaryAddScreen({super.key});

  @override
  State<MissionaryAddScreen> createState() => _MissionaryAddScreenState();
}

class _MissionaryAddScreenState extends State<MissionaryAddScreen> {
  final _formKey = GlobalKey<FormState>();
  final _firestoreService = FirestoreService();
  
  final _nameController = TextEditingController();
  final _bioController = TextEditingController();
  final _fieldController = TextEditingController();
  final _countryController = TextEditingController();
  final _centuryController = TextEditingController();
  final _imageUrlController = TextEditingController();
  
  bool _isLoading = false;

  @override
  void dispose() {
    _nameController.dispose();
    _bioController.dispose();
    _fieldController.dispose();
    _countryController.dispose();
    _centuryController.dispose();
    _imageUrlController.dispose();
    super.dispose();
  }

  Future<void> _createMissionary() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
    });

    try {
      // Create new missionary object
      final newMissionary = Missionary(
        id: '', // Will be generated by Firestore
        fullName: _nameController.text.trim(),
        heroImageUrl: _imageUrlController.text.trim(),
        bio: _bioController.text.trim().isNotEmpty ? _bioController.text.trim() : null,
        fieldOfService: _fieldController.text.trim().isNotEmpty ? _fieldController.text.trim() : null,
        countryOfService: _countryController.text.trim().isNotEmpty ? _countryController.text.trim() : null,
        century: _centuryController.text.trim().isNotEmpty ? _centuryController.text.trim() : null,
      );

      // Create using the FirestoreService
      final missionaryId = await _firestoreService.createMissionary(newMissionary);

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Missionary created successfully! ID: $missionaryId'),
            backgroundColor: Colors.green,
          ),
        );
        Navigator.of(context).pop(newMissionary.copyWith(id: missionaryId));
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to create missionary: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  void _clearForm() {
    _nameController.clear();
    _bioController.clear();
    _fieldController.clear();
    _countryController.clear();
    _centuryController.clear();
    _imageUrlController.clear();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Add New Missionary',
          style: GoogleFonts.lato(fontWeight: FontWeight.bold),
        ),
        backgroundColor: const Color(0xFF667eea),
        foregroundColor: Colors.white,
        elevation: 0,
        actions: [
          IconButton(
            onPressed: _isLoading ? null : _clearForm,
            icon: const Icon(Icons.clear_all),
          ),
        ],
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Color(0xFF667eea), Color(0xFF764ba2)],
          ),
        ),
        child: SafeArea(
          child: Column(
            children: [
              Expanded(
                child: Container(
                  margin: const EdgeInsets.all(16),
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(20),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withValues(alpha: 0.1),
                        blurRadius: 10,
                        offset: const Offset(0, 5),
                      ),
                    ],
                  ),
                  child: Form(
                    key: _formKey,
                    child: SingleChildScrollView(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'New Missionary',
                            style: GoogleFonts.lato(
                              fontSize: 24,
                              fontWeight: FontWeight.bold,
                              color: const Color(0xFF667eea),
                            ),
                          ),
                          const SizedBox(height: 8),
                          Text(
                            'Fill in the information below to add a new missionary to the database.',
                            style: GoogleFonts.lato(
                              fontSize: 14,
                              color: Colors.grey[600],
                            ),
                          ),
                          const SizedBox(height: 24),
                          
                          _buildTextField(
                            controller: _nameController,
                            label: 'Full Name *',
                            icon: Icons.person,
                            required: true,
                            helperText: 'Enter the missionary\'s full name',
                          ),
                          
                          const SizedBox(height: 16),
                          
                          _buildTextField(
                            controller: _imageUrlController,
                            label: 'Image URL *',
                            icon: Icons.image,
                            required: true,
                            helperText: 'URL to the missionary\'s portrait image',
                          ),
                          
                          const SizedBox(height: 16),
                          
                          _buildTextField(
                            controller: _bioController,
                            label: 'Biography',
                            icon: Icons.book,
                            maxLines: 4,
                            helperText: 'Brief biography of the missionary',
                          ),
                          
                          const SizedBox(height: 16),
                          
                          _buildTextField(
                            controller: _fieldController,
                            label: 'Field of Service',
                            icon: Icons.work,
                            helperText: 'e.g., Education, Medical, Evangelism',
                          ),
                          
                          const SizedBox(height: 16),
                          
                          _buildTextField(
                            controller: _countryController,
                            label: 'Country of Service',
                            icon: Icons.public,
                            helperText: 'Primary country where they served',
                          ),
                          
                          const SizedBox(height: 16),
                          
                          _buildTextField(
                            controller: _centuryController,
                            label: 'Century',
                            icon: Icons.calendar_today,
                            helperText: 'e.g., 19th Century, 20th Century',
                          ),
                          
                          const SizedBox(height: 24),
                          
                          // Preview section
                          Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: Colors.grey[50],
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(color: Colors.grey[200]!),
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  children: [
                                    const Icon(Icons.preview, color: Color(0xFF667eea)),
                                    const SizedBox(width: 8),
                                    Text(
                                      'Preview',
                                      style: GoogleFonts.lato(
                                        fontSize: 16,
                                        fontWeight: FontWeight.bold,
                                        color: const Color(0xFF667eea),
                                      ),
                                    ),
                                  ],
                                ),
                                const SizedBox(height: 12),
                                _buildPreviewRow('Name:', _nameController.text),
                                _buildPreviewRow('Field:', _fieldController.text),
                                _buildPreviewRow('Country:', _countryController.text),
                                _buildPreviewRow('Century:', _centuryController.text),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
              
              // Action buttons
              Container(
                padding: const EdgeInsets.all(16),
                child: Row(
                  children: [
                    Expanded(
                      child: ElevatedButton(
                        onPressed: _isLoading ? null : () => Navigator.of(context).pop(),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.grey[600],
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 16),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        child: Text(
                          'Cancel',
                          style: GoogleFonts.lato(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: ElevatedButton(
                        onPressed: _isLoading ? null : _createMissionary,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: const Color(0xFF667eea),
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 16),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        child: _isLoading
                            ? const SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  color: Colors.white,
                                  strokeWidth: 2,
                                ),
                              )
                            : Text(
                                'Create Missionary',
                                style: GoogleFonts.lato(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool required = false,
    int maxLines = 1,
    String? helperText,
  }) {
    return TextFormField(
      controller: controller,
      maxLines: maxLines,
      decoration: InputDecoration(
        labelText: label,
        helperText: helperText,
        prefixIcon: Icon(icon),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF667eea), width: 2),
        ),
      ),
      validator: required
          ? (value) {
              if (value == null || value.trim().isEmpty) {
                return '${label.replaceAll('*', '').trim()} is required';
              }
              return null;
            }
          : null,
      onChanged: (value) => setState(() {}), // Trigger rebuild for preview
    );
  }

  Widget _buildPreviewRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 2),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 70,
            child: Text(
              label,
              style: GoogleFonts.lato(
                fontSize: 12,
                fontWeight: FontWeight.w600,
                color: Colors.grey[600],
              ),
            ),
          ),
          Expanded(
            child: Text(
              value.isEmpty ? '-' : value,
              style: GoogleFonts.lato(
                fontSize: 12,
                color: value.isEmpty ? Colors.grey[400] : Colors.grey[800],
              ),
            ),
          ),
        ],
      ),
    );
  }
}